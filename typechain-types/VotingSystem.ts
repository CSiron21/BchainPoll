/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPoll"
      | "getPollDetails"
      | "getVoteCount"
      | "hasVoted"
      | "pollCount"
      | "polls"
      | "vote"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PollCreated" | "Voted"): EventFragment;

  encodeFunctionData(
    functionFragment: "createPoll",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPollDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pollCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPollDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pollCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace PollCreatedEvent {
  export type InputTuple = [
    pollId: BigNumberish,
    title: string,
    options: string[],
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    pollId: bigint,
    title: string,
    options: string[],
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    pollId: bigint;
    title: string;
    options: string[];
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    pollId: BigNumberish,
    voter: AddressLike,
    option: BigNumberish
  ];
  export type OutputTuple = [pollId: bigint, voter: string, option: bigint];
  export interface OutputObject {
    pollId: bigint;
    voter: string;
    option: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingSystem extends BaseContract {
  connect(runner?: ContractRunner | null): VotingSystem;
  waitForDeployment(): Promise<this>;

  interface: VotingSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPoll: TypedContractMethod<
    [_title: string, _options: string[], _durationInMinutes: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getPollDetails: TypedContractMethod<
    [_pollId: BigNumberish],
    [
      [string, string[], bigint, bigint, boolean] & {
        title: string;
        options: string[];
        startTime: bigint;
        endTime: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getVoteCount: TypedContractMethod<
    [_pollId: BigNumberish, _optionIndex: BigNumberish],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [_pollId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  pollCount: TypedContractMethod<[], [bigint], "view">;

  polls: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        title: string;
        startTime: bigint;
        endTime: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  vote: TypedContractMethod<
    [_pollId: BigNumberish, _optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPoll"
  ): TypedContractMethod<
    [_title: string, _options: string[], _durationInMinutes: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPollDetails"
  ): TypedContractMethod<
    [_pollId: BigNumberish],
    [
      [string, string[], bigint, bigint, boolean] & {
        title: string;
        options: string[];
        startTime: bigint;
        endTime: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteCount"
  ): TypedContractMethod<
    [_pollId: BigNumberish, _optionIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [_pollId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pollCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "polls"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        title: string;
        startTime: bigint;
        endTime: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_pollId: BigNumberish, _optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PollCreated"
  ): TypedContractEvent<
    PollCreatedEvent.InputTuple,
    PollCreatedEvent.OutputTuple,
    PollCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "PollCreated(uint256,string,string[],uint256,uint256)": TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;
    PollCreated: TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;

    "Voted(uint256,address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
